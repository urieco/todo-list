"use strict";(self.webpackChunkto_do_list=self.webpackChunkto_do_list||[]).push([[826],{138:()=>{class e{constructor(e,t="",i,n,l="",s=!1){this.title=e,this.description=t,this.dueDate=i,this.priority=n,this.note=l,this.finished=s}}class t{constructor(e=[]){this.list=e}add(...t){t.forEach((t=>{t instanceof e&&this.list.push(t)}))}remove(...e){e.forEach((e=>{let t=this.list.indexOf(e);-1!=this.list[e]&&this.list.splice(t,1)}))}}let i=[],n=0;const l=()=>{let l=document.querySelector("#title").value,o=document.querySelector("#description").value,r=document.querySelector("#dueDate").value,a=document.querySelector("#priority").value,c=document.querySelector("#note").value;const d=new Date,u=["01","02","03","04","05","06","07","08","09","10","11","12"][d.getMonth()],m=`${d.getFullYear()}-${u}-${d.getDate()}`;return{createList:function(){let e=new t;i.push(e),s().addList()},createTask:function(){if(!l||r<m)return void s().warning();let t=new e(l,o,r,a,c);s().addTask(l,r,a,o,c),i[n].add(t)},finishTask:function(e){i[n].list[e].finished=!0},removeTask:function(e){i[n].list.splice(e,1)}}},s=()=>{const e=document.querySelector("#app");function t(e,t="div"){let i=document.createElement(`${t}`);return"."==e.slice(0,1)&&i.classList.add(e.slice(1)),"#"==e.slice(0,1)&&i.setAttribute("id",e.slice(1)),function(e){return void 0!==e?(e.appendChild(i),function e(t,n){return void 0!==t&&void 0!==n?(i.setAttribute(`${t}`,`${n}`),e):i}):i}}function s(e){document.querySelectorAll("#app > .list").forEach((e=>{e.classList.add("hidden")}));let t=document.querySelector(`.list[data-list='${e}']`);t&&t.classList.remove("hidden")}function o(){t(".list")(e)("data-list",i.length-1),d()}function r(e,l,s,o,r,c=n){let d=document.querySelector(`.list[data-list="${c}"]`),u=i[n].list.length;if(""==d.textContent){let e=d.getAttribute("name");e=null!=e?e:d.getAttribute("data-list"),t(".list-name","span")(d)().textContent=`List ${e}: `}let m=t(".task")(d)("data-task",u);m().textContent=`TITLE: ${e} | DUE DATE: ${l} | PRIORITY: ${s}   `;let f="High"==s?"pink":"Medium"==s?"yellow":"yellowgreen";m().setAttribute("style",`background-color: ${f}`);let h=t(".button-container")(m());a(".finish",h()),a(".remove",h());let v=t(".detail")(d)("data-task",u);v().classList.add("hidden"),v().innerText=`DESCRIPTION: ${o}\nNOTE: ${r}`,m().addEventListener("mouseover",(()=>{v().classList.remove("hidden")})),m().addEventListener("mouseleave",(()=>{v().classList.add("hidden")}))}function a(e,i){const n=t(e,"button")(i),s=Number(n().parentNode.parentNode.getAttribute("data-task"));".remove"==e?(n().textContent="X",n().addEventListener("click",(()=>{n().parentNode.parentNode.remove(),document.querySelector(`.detail[data-task='${s}']`).remove(),l().removeTask(s),c()}))):(n().innerHTML="&#10004;",n().addEventListener("click",(()=>{n().classList.toggle("done"),l().finishTask(s)})))}function c(){document.querySelectorAll(".list").forEach((e=>{if(e.hasChildNodes()){let t=e.childNodes,i=0;for(let e of t)"task"==e.className&&(e.setAttribute("data-task",i),i++)}}))}function d(){document.querySelectorAll(".scroller-container > div").forEach((e=>e.remove()));for(let e of i){const l=t(".scroller-item")(document.querySelector(".scroller-container"))("data-list",i.indexOf(e));let o=Number(l().getAttribute("data-list")),r=document.querySelector(`.list[data-list='${o}']`);r&&(r=r.getAttribute("name")),l().textContent=null!=r?r:o,t(".image","img")(l())("src","./images/folder.svg"),l().addEventListener("click",(()=>{document.querySelectorAll(".scroller-item").forEach((e=>{e.classList.remove("selected")})),l().classList.toggle("selected"),n=o,s(n)}))}document.querySelector(`.scroller-item[data-list='${n}']`).classList.add("selected");let e=t(".more-list")(document.querySelector(".scroller-container"));e().textContent="+",e().addEventListener("click",(()=>{l().createList()}))}return{makeElement:t,addList:o,addTask:r,listScroller:d,warning:function(){let e=document.querySelector(".warning");e.textContent="",document.querySelector("#title").value?e.textContent="*Due Date has to be later than Today!":e.textContent="*You have to enter a Title!"},refreshAllTasks:function(){for(let e of i)o();let e=0;document.querySelectorAll(".list").forEach((t=>{t.setAttribute("data-list",e),e++}));for(let e of i)for(let t of e.list)r(t.title,t.dueDate,t.priority,t.description,t.note,i.indexOf(e));c(),s(n)}}};!function(){const e=document.querySelector("#input-area");!function(){const e=JSON.parse(localStorage.getItem("savedData"));if(!e)return i=[];for(let n of e)i.push(new t),i[e.indexOf(n)].list=n.list}(),0==i.length&&l().createList(),s().makeElement("#reset","input")(e)("type","reset")("style","visibility: hidden; position: absolute;"),document.querySelector(".addTask").addEventListener("click",(e=>{e.preventDefault(),l().createTask(),document.querySelector("#reset").click(),localStorage.setItem("savedData",JSON.stringify(i))})),s().refreshAllTasks()}()}},e=>{e(e.s=138)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,